#!usr/bin/env php
<?php

require 'vendor/autoload.php';

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;

class RouteCommand extends Command {

    protected function configure() {
        $this->setName('make:route')
            ->setDescription('Generate a new route')
            ->addArgument(
                'name',
                InputArgument::REQUIRED
            );
    }
    

    protected function execute(InputInterface $input, OutputInterface $output) {
        $routeName = $input->getArgument('name');

        if($routeName) {
            $route = <<<EOT
<?php

\$app->get('/', function(\$req, \$res, \$args) {
    return \$res->getBody()->write("Hi there!");
    return \$res;
})->setName('my-route');

EOT;
            // capitalize the route name
            $routeName = ucfirst($routeName);
            // if has any dot then explode and get the zero index
            if(strpos($routeName, '.') !== false) {
                $routeName = explode('.', $routeName)[0];
            }

            // check if the route file exists without .route.php
            if(!file_exists(__DIR__ ."/App/Routes/". $routeName .".route.php")) {
                // if the route doesn't exist then create a new file with .route.php inside App/Routes folder
                $file = fopen(__DIR__ ."/App/Routes/". $routeName .".route.php", 'w');
                // then write inside the file the basic content of the route
                fwrite($file, $route);
            } else {
                $output->writeln("<error>File {$routeName}.route.php already exists</error>");
                return;
            }

            $output->writeln("<info>{$routeName}.route.php created</info>");
        } else {
            $output->writeln("<error>empty route name</error>");
        }
    }
}

class ModelCommand extends Command {

    protected function configure() {
        $this->setName('make:model')
            ->setDescription('Generate a new model')
            ->addArgument(
                'name',
                InputArgument::REQUIRED
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output) {
        $name = $input->getArgument('name');

        if($name) {
            $name = ucfirst($name);
            $model = <<<EOT
<?php
namespace App\Models;

class $name extends Model {
    public function __construct(\$db) {
        parent::__construct(\$db);
    }

    public function get$name() {
        \$query = \$this->db->prepare('...');
        \$result = \$query->execute();
        if(\$result) {
            return \$query->fetchAll();
        }

        return [];
    }
}
EOT;
            
            if(!file_exists(__DIR__ ."/App/Models/". $name .".php")) {
                $file = fopen(__DIR__ ."/App/Models/". $name .".php", 'w');
                fwrite($file, $model);
            } else {
                $output->writeln("<error>Model {$name}.php already exists</error>");
                return;
            }
            
            $output->writeln("<comment>Model {$name} generated</comment>");
        }
    }
}

class ViewCommand extends Command {
    protected function configure() {
        $this->setName('make:view')
            ->setDescription('Generate a new HTML file')
            ->addArgument(
                'name',
                InputArgument::REQUIRED
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output) {
        $name = $input->getArgument('name');

        if($name) {
            $name = ucfirst($name);
            $view = <<<EOT

EOT;
        } else {
            $output->writeln();
        }
    }
}

$argv = new ArgvInput();
$output = new ConsoleOutput();
$commandList = <<<EOT

Available commands:
- <info>make:route</info>    Generate a new route file with the format *.route.php
- <info>make:model</info>    Create a new model
- <info>make:view</info>     Generate a new Twig template(HTML5 file)

EOT;
$command = $argv->getFirstArgument();
$application = new Application();

if(!$command || $command === 'help' || $command === 'h') {
    $output->writeln($commandList);
}

switch (strtolower($argv->getFirstArgument())) {
    case 'make:route':
        $application->add(new RouteCommand());
        break;
    case 'make:model':
        $application->add(new ModelCommand());
        # generate model
        break;
    case 'make:view':
        # generate Twig view
        break;
    default:
        // $output->writeln($commandList);
        break;
}

$application->run();
